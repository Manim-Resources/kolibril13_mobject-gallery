{
  "Plots": [
    [
      {
        "image": "Axes_e_x.png",
        "code": "axes = Axes( \n    x_range=[-8, 9, 2], \n    y_range=[-6, 7, 2], \n    x_length=4, \n    y_length=4, \n    axis_config={\"include_numbers\": True, \"numbers_to_exclude\": [0]}, \n    x_axis_config={\"color\": ORANGE}, \n    y_axis_config={\"color\": ORANGE}, \n) \naxes_label = axes.get_axis_labels(x_label=\"x\", y_label=\"f(x)\") \ngraph = axes.plot(lambda x: 5*np.e ** (-x**2/2), x_range=[-5, 5], color=YELLOW) \ngraph_label = axes.get_graph_label(graph, label=\"e^{-x^2}\", color=YELLOW, x_val=1,dot=False) \nself.add(axes, graph, graph_label, axes_label) ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "Axes_zoom.png",
        "code": "%%manim $params\nclass Example(ZoomedScene):  \n    def __init__(self, **kwargs):  \n        ZoomedScene.__init__( \n            self, \n            zoom_factor=0.1, \n            zoomed_display_height=6, \n            zoomed_display_width=3,  \n            image_frame_stroke_width=20,  \n            zoomed_camera_config={  \n                \"default_frame_stroke_width\": 3,  \n            },  \n            **kwargs  \n        )      \n      \n    def construct(self):  \n        self.activate_zooming(animate=False)  \n      \n        ax = Axes(  \n            x_range=[0, 10, 2],  \n            y_range=[0,10, 2],  \n            x_length=2,  \n            y_length=2,  \n            x_axis_config={\"color\": ORANGE},  \n            y_axis_config={\"color\": ORANGE},  \n        )  \n        ax.shift(DL)  \n        x_vals = [0, 1, 2, 3,4,5]  \n        y_vals = [2, -1, 4, 2, 4, 1]  \n        graph = ax.plot_line_graph(x_values=x_vals, y_values=y_vals)  \n        self.zoomed_camera.frame.move_to(graph.get_top()+0.1*DL)  \n        self.zoomed_display.shift(3*LEFT+0.4*UP)  \n        self.camera.frame.scale(1/2)  \n        self.camera.frame.shift(UR*1)  \n        self.add(ax, graph)  ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "ComplexPlane.png",
        "code": "plane = ComplexPlane().add_coordinates() \nd1 = Dot(plane.n2p(2 + 1j), color=YELLOW) \nd2 = Dot(plane.n2p(-3 - 2j), color=YELLOW) \nlabel1 = MathTex(\"2+i\").next_to(d1, UR, 0.1) \nlabel2 = MathTex(\"-3-2i\").next_to(d2, UR, 0.1) \nself.add(plane, d1,label1,d2,label2) ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "PolarPlane.png",
        "code": "polarplane_pi = PolarPlane( \n    azimuth_units=\"PI radians\", \n    size=6, \n    azimuth_label_font_size=33.6, \n    radius_config={\"font_size\": 33.6}, \n).add_coordinates() ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "Graph_with_Number.png",
        "code": "vertices = [1, 2, 3, 4, 5, 6, 7, 8]  \nedges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),  \n         (2, 8), (3, 4), (6, 1), (6, 2),  \n         (6, 3), (7, 2), (7, 4)]  \ng = Graph(vertices, edges, layout=\"circular\", layout_scale=3,  \n          labels=True, vertex_config={7: {\"fill_color\": RED}},  \n          edge_config={(1, 7): {\"stroke_color\": RED},  \n                       (2, 7): {\"stroke_color\": RED},  \n                       (4, 7): {\"stroke_color\": RED}})  ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "StreamLines.png",
        "code": "func = lambda pos: ((pos[0]*UR+pos[1]*LEFT) - pos)  \nmob= StreamLines(func,x_range=[-5,5,1], y_range=[-5,5,1],stroke_width=3)  \nself.add(mob)  ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "ArrowVectorField.png",
        "code": "func = lambda pos: np.sin(pos[1])*RIGHT+np.cos(pos[0])*UP  \nmob = ArrowVectorField(func)  ",
        "css": "width: 170px; height: auto;"
      }
    ]
  ],
  "Text": [
    [
      {
        "image": "Text1.png",
        "code": "mob = Text(\"Hello\", color=WHITE) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Text2.png",
        "code": "mob = Text(\"World\", color=YELLOW,slant=ITALIC) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Underline.png",
        "code": "t = Tex(\"YES\") \nul = Underline(t, color=YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Bold.png",
        "code": "mob = Text(\"NO\", color=YELLOW,weight=BOLD)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "MathTex.png",
        "code": "mob = MathTex(r\"\\Psi(x)\", color=WHITE)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "MathTex_stix2.png",
        "code": "stix2 = TexTemplate()  \nstix2.add_to_preamble(r\"\\usepackage{stix2}\", prepend= True)  \nMathTex.set_default(tex_template=stix2)  \nmob = MathTex(r\"\\Psi(x)\", color=WHITE)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "MathTex2.png",
        "code": "mob = MathTex(r\"e^x\",substrings_to_isolate=\"x\") \nmob.set_color_by_tex(\"x\", YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Check.png",
        "code": "check= Tex(r\"\\checkmark\", color= GREEN, stroke_width=8).scale(3) \ncheck.stretch(0.8, dim = 1) \ncheck.stretch(1.1, dim = 0) ",
        "css": ""
      }
    ]
  ],
  "Camera and Style": [
    [
      {
        "image": "Background.png",
        "code": "self.camera.background_color = YELLOW ",
        "css": ""
      }
    ],
    [
      {
        "image": "ZoomIN.png",
        "code": "#needs ZoomedScene \nself.camera.frame.scale(0.6) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ZoomOUT.png",
        "code": "# needs ZoomedScene \nself.camera.frame.scale(1.2) ",
        "css": ""
      }
    ],
    [
      {
        "image": "CameraLEFT.png",
        "code": "# needs ZoomedScene \nself.camera.frame.shift(LEFT*0.5) ",
        "css": ""
      }
    ],
    [
      {
        "image": "CameraUP.png",
        "code": "# needs ZoomedScene \nself.camera.frame.shift(UP*0.4) ",
        "css": ""
      }
    ],
    [
      {
        "image": "MatchHEIGHT.png",
        "code": "# needs ZoomedScene \nself.camera.frame.height =  mob.height + 3*SMALL_BUFF ",
        "css": ""
      }
    ],
    [
      {
        "image": "MatchWIDTH.png",
        "code": "# needs ZoomedScene \nself.camera.frame.width =  mob.width + 3*SMALL_BUFF  ",
        "css": ""
      }
    ],
    [
      {
        "image": "FullScreenRectangle.png",
        "code": "mob = FullScreenRectangle(stroke_width=200, color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "SurroundingRectangle.png",
        "code": "inner = Tex(r\"\\textbf{Hello}\", color=WHITE) \nmob = SurroundingRectangle(inner, corner_radius=0.1) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Dot_set_color_by_gradient.png",
        "code": "mob = Dot(radius=2.0)  \nmob.set_color_by_gradient([PINK, BLUE]) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Polygon_set_color.png",
        "code": "mob = Polygon([-1, .5, 0], [-.5, 2, 0], [1, 2, 0], [1.5, .5, 0], [.25, -.5, 0], sheen_direction = UP) \nmob.set_fill(opacity=.5) \nmob.set_color([TEAL, RED, YELLOW]) \nmob.set_stroke(width=8) \nmob.move_to(ORIGIN) ",
        "css": ""
      }
    ]
  ]
}