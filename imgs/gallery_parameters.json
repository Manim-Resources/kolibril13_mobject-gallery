{
  "Basic Shapes": [
    [
      {
        "image": "Dot.png",
        "code": "mob = Dot(color = YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Circle.png",
        "code": "mob = Circle(fill_opacity=1, fill_color= ORANGE, stroke_color=YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Annulus.png",
        "code": "mob = Annulus(inner_radius=0.5, outer_radius=1.2,fill_color= DARK_BLUE, stroke_color=YELLOW, stroke_width=2) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Ellipse.png",
        "code": "mob= Ellipse(color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Sector.png",
        "code": "mob = Sector(inner_radius=0.5, outer_radius=1.2,fill_color= DARK_BLUE, stroke_color=YELLOW, stroke_width=2) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Arc.png",
        "code": "mob= Arc(radius=1.3, start_angle=-PI/8, angle=PI,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ArcBetweenPoints.png",
        "code": "mob = ArcBetweenPoints(start=2 * RIGHT, end=2*LEFT, stroke_color=YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Line.png",
        "code": "mob = Line(color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "DashedLine.png",
        "code": "mob = DashedLine(0.2*LEFT, 0.2*RIGHT,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "DashedCircle.png",
        "code": "circ = Circle(stroke_color=YELLOW) \nmob = DashedVMobject(circ, num_dashes=10) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Square.png",
        "code": "mob= Square(color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Rectangle.png",
        "code": "mob= Rectangle(width=3.5, height=2.0, color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Rectangle_grid.png",
        "code": "mob= Rectangle(width=4, height=2.0,grid_xstep=2, grid_ystep=1,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "RoundedRectangle1.png",
        "code": "mob= RoundedRectangle(corner_radius=0.5, color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "RoundedRectangle2.png",
        "code": "mob= RoundedRectangle(corner_radius=0.8, height=2.2, width=2.2,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Elbow.png",
        "code": "mob = Elbow(width=0.5, angle=0*DEGREES,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "RightAngle.png",
        "code": "line1 = Line( ORIGIN, RIGHT ) \nline2 = Line( ORIGIN, UP ) \nmob = RightAngle(line1, line2, color=YELLOW, stroke_width=7) \nself.add(VGroup(mob,line1, line2).shift(DL*0.3)) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Angledot.png",
        "code": "line1 = Line( LEFT*0.2, RIGHT ) \nline2 = Line( DOWN*0.2, UP ) \na= Angle(line1, line2, dot=True, color=YELLOW, dot_color=YELLOW) \nself.add(VGroup(line1, line2, a).move_to(ORIGIN)) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Angle_get_value.png",
        "code": "line1 = Line((LEFT+(1/3)*UP)*0.1, RIGHT+(1/3)*DOWN) \nline2 = Line((DOWN+(1/3)*RIGHT)*0.1, UP+(1/3)*LEFT) \nangle = Angle(line1, line2, radius=0.3) \nvalue = Integer(angle.get_value(degrees=True), unit=\"^{\\circ}\", color=YELLOW) \nvalue.next_to(angle, UR,buff=0) \nself.add(VGroup(line1, line2, angle, value).move_to(ORIGIN)) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Triangle.png",
        "code": "mob= Triangle(color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Cross.png",
        "code": "mob= Cross(stroke_color = YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Star.png",
        "code": "mob= Star(color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "RegularPolygram5.png",
        "code": "mob= RegularPolygram(5,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "RegularPolygram6.png",
        "code": "mob= RegularPolygram(6,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "RegularPolygon5.png",
        "code": "mob= RegularPolygon(5,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "RegularPolygon6.png",
        "code": "mob= RegularPolygon(6,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "CutOut.png",
        "code": "s1 = Square().scale(2.5) \ns2 = Star().shift(LEFT) \ns3 = Circle().shift(RIGHT)  \nc = Cutout(s1, s2, s3, fill_opacity=1, color=YELLOW)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "TwoCircles.png",
        "code": "self.camera.frame.scale(1/25)  \nmob = Circle(color= YELLOW, fill_opacity=1,stroke_width=0).scale(0.1)  \nmob2 = Circle(color= ORANGE, fill_opacity=1,stroke_width=0).scale(0.1) \nx=VGroup(mob,mob2).arrange(RIGHT, buff=-0.1) ",
        "css": ""
      }
    ],
    [
      {
        "image": "TwoCirclesIntersection.png",
        "code": "inter = Intersection(mob, mob2, color=YELLOW, fill_opacity=1,stroke_width=0)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "TwoCirclesExclusion.png",
        "code": "ex = Exclusion(mob2, mob, color=YELLOW, fill_opacity=1,stroke_width=0) ",
        "css": ""
      }
    ],
    [
      {
        "image": "TwoCirclesDifference.png",
        "code": "diff = Difference(mob, mob2, color=YELLOW, fill_opacity=1,stroke_width=0) ",
        "css": ""
      }
    ],
    [
      {
        "image": "TwoCirclesUnion.png",
        "code": "uni = Union(mob, mob2, color=YELLOW, fill_opacity=1,stroke_width=0) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Arrow.png",
        "code": "mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ArrowSquareTip.png",
        "code": "mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW, tip_shape=ArrowSquareTip) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ArrowSquareFilledTip.png",
        "code": "mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW, tip_shape=ArrowSquareFilledTip) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ArrowCircleTip.png",
        "code": "mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW, tip_shape=ArrowCircleTip) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ArrowCircleFilledTip.png",
        "code": "mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW, tip_shape=ArrowCircleFilledTip) ",
        "css": ""
      }
    ],
    [
      {
        "image": "DoubleArrow.png",
        "code": "mob = DoubleArrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "CurvedArrow.png",
        "code": "mob = CurvedArrow(LEFT,RIGHT,color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ParametricFunction.png",
        "code": "mob = ParametricFunction(lambda t: [t,0.2*np.sin(10*t),0],t_range = [-TAU, TAU],color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "CubicBezier.png",
        "code": "p1 = [-3, 1, 0] \np1b=  p1 + 5 * RIGHT + 2 * UP \np2 = [3, -1, 0] \np2b = p2 + 5 * LEFT \nmob = CubicBezier(p1,p1b, p2b, p2, color=YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Brace.png",
        "code": "mob = Brace(Line(LEFT*0.5,RIGHT*0.5),color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "BraceLabel.png",
        "code": "l=Line(ORIGIN, RIGHT*1.4) \nmob= BraceLabel(l, text= r\"14 \\, \\text{cm}\", color= YELLOW, buff=0.1) \nmob.submobjects[1].set_color(YELLOW) \nself.add(VGroup(l,mob).move_to(ORIGIN)) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ArcBrace.png",
        "code": "arc = Arc(radius=0.5,start_angle=0,angle=5*PI/6) \nbrace = ArcBrace(arc).set_color(YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "AnnotationDot.png",
        "code": "mob = AnnotationDot(stroke_color=YELLOW, fill_color=ORANGE) ",
        "css": ""
      }
    ],
    [
      {
        "image": "LabeledDot.png",
        "code": "mob = LabeledDot(Tex(\"42\", color=BLACK), color=YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ManimBanner.png",
        "code": "mob = ManimBanner() ",
        "css": ""
      }
    ],
    [
      {
        "image": "HTMLBanner.png",
        "code": "%%manim $params\n#-v WARNING -r 80,80 -s  --disable_caching Example\nclass Example(ZoomedScene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\" #HEREFROM\n        logo_green = \"#87c2a5\"\n        logo_blue = \"#525893\"\n        logo_red = \"#e07a5f\"\n        circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)\n        square = Square(color=logo_blue, fill_opacity=1).shift(UP)\n        triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)\n        logo = VGroup(triangle, square, circle).scale(1.3)#.scale(2.0) #HERETO\n        logo.move_to(ORIGIN)\n        self.add(logo)\n        self.camera.frame.scale(1/1.5)",
        "css": ""
      }
    ],
    [
      {
        "image": "FlyingFramesBanner.png",
        "code": "%%manim $params\n#-v WARNING -r 80,80 -s  --disable_caching Example\n\nclass Example(ZoomedScene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\" #HEREFROM\n        logo_green = \"#87c2a5\"\n        logo_blue = \"#525893\"\n        logo_red = \"#e07a5f\"        \n        logo_black = BLACK\n        d= Dot(color= logo_green, radius=0.8).shift(UR*0.6)\n        l = VGroup(*[Line(color=logo_blue, stroke_width=70/3) for _ in range(0,3)])\n        l.arrange(DOWN,buff=0.45).next_to(d, LEFT).shift(0.3*LEFT)\n        l[0::2].shift(0.3*RIGHT)\n        l.rotate(30*DEGREES, about_point=d.get_center())\n        arc= Arc(radius=1.0, color= logo_red, start_angle=PI/4, angle=PI, stroke_width=70)\n        arc.shift(1.75*DOWN+1.15*RIGHT)\n        self.add(arc, d,l) #HERETO\n        self.camera.frame.width = 3 *2 # take this *2 out for logo creation",
        "css": ""
      }
    ],
    [
      {
        "image": "ImageMobject.png",
        "code": "mob = ImageMobject(image).scale(2)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "ImageMobject_nearest.png",
        "code": "a= np.random.randint(0, 255, size=(3, 4)) \nimg = ImageMobject(np.uint8(a)) \nimg.height = 6 \nimg.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"nearest\"]) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ImageMobject_cubic.png",
        "code": "np.random.seed(41) \na= np.random.randint(0, 255, size=(3, 4)) \nimg = ImageMobject(np.uint8(a)) \nimg.height = 6 \nimg.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"cubic\"]) ",
        "css": ""
      }
    ],
    [
      {
        "image": "SVGMobject.png",
        "code": "mob = SVGMobject(\"svg_logo.svg\") ",
        "css": ""
      }
    ],
    [
      {
        "image": "Matrix.png",
        "code": "mob = Matrix([[9, 3], [1, 5]]) \nbra = mob.get_brackets() \nbra.set_color(YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Matrix_SurroundingRectangle.png",
        "code": "mob = Matrix([[\"\\pi\", 3], [1, 5]]) \nmob.add(SurroundingRectangle(mob.get_columns()[1])) ",
        "css": ""
      }
    ],
    [
      {
        "image": "MobjectMatrix.png",
        "code": "a = Circle(color=YELLOW).scale(0.3) \nb = Square().scale(0.3) \nc = MathTex(\"\\pi\").scale(2) \nd = Star(color=YELLOW).scale(0.3) \nmob = MobjectMatrix([[a, b], [c, d]]) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Matrix_bracket.png",
        "code": "mob = Matrix([[2, 0, 4], [-1, 1, 5]], \n    v_buff=0.8, \n    h_buff=0.8, \n    bracket_h_buff=SMALL_BUFF, \n    bracket_v_buff=SMALL_BUFF, \n    left_bracket=\"\\{\", \n    right_bracket=\"\\}\") \nmob.set_row_colors(YELLOW, YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Table_add_highlighted_cell.png",
        "code": "mob = Table( \n    [[\"12\", \"200\"], \n    [\"55\",\"393\"]], include_outer_lines=True) \nmob.add_highlighted_cell((1,2), color=YELLOW)     \nmob.add_highlighted_cell((2,2), color=RED)     ",
        "css": ""
      }
    ],
    [
      {
        "image": "Code.png",
        "code": "%%manim $params\nclass Example(ZoomedScene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\" #HEREFROM\n        code= \"\"\"j = 1 \nk = \"Hello\" \"\"\"\n        rendered_code = Code(code=code, background_stroke_color= WHITE, tab_width=2, background=\"window\",\n                            language=\"Python\", font=\"Monospace\").scale(3.7) #HERETO\n        rendered_code[2].set_color(YELLOW)\n        rendered_code[2].set_stroke(width=5) \n        self.add(rendered_code)",
        "css": ""
      }
    ],
    [
      {
        "image": "NumberPlane.png",
        "code": "%%manim $params\nclass Example(ZoomedScene):\n    def construct(self):\n        number_plane = NumberPlane( #HEREFROM\n            x_range=[-10, 10, 1],\n            y_range=[-10, 10, 1],\n            stroke_width=100,\n            axis_config = {\n                \"stroke_color\": YELLOW,\n                \"stroke_width\": 20,\n            },\n            background_line_style={\n                \"stroke_color\": GREY,\n                \"stroke_width\": 15,\n                \"stroke_opacity\": 1\n            }\n        )\n        self.add(number_plane) #HERETO\n        self.camera.frame.scale(1/2)",
        "css": ""
      }
    ],
    [
      {
        "image": "NumberLine.png",
        "code": "%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        mob = NumberLine( #HEREFROM\n            x_range=[-4, 4, 2],\n            length=2,\n            color=YELLOW,\n            include_numbers=True,\n            label_direction=UP,\n        )\n\n        self.add(mob.move_to(ORIGIN)) #HERETO\n        self.camera.frame.scale(1/5)",
        "css": ""
      }
    ],
    [
      {
        "image": "NumberLine_rotation.png",
        "code": "%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        mob = NumberLine( #HEREFROM\n            x_range=[0, 4, 1],\n            length=2,\n            include_tip=True,\n            color=YELLOW,\n            include_numbers=True,\n            rotation=10 * DEGREES,\n        )\n        self.add(mob.move_to(ORIGIN)) #HERETO\n        self.camera.frame.scale(1/5)",
        "css": ""
      }
    ],
    [
      {
        "image": "NumberLine_decimal.png",
        "code": "%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        mob = NumberLine( #HEREFROM\n            x_range=[-4, 4, 2.5], \n            length=3,\n            decimal_number_config={\"num_decimal_places\": 2},\n            include_numbers=True,\n        )\n        mob.numbers[2].set_color(YELLOW) #HERETO\n        self.add(mob.move_to(ORIGIN))\n        self.camera.frame.scale(1/5)",
        "css": ""
      }
    ],
    [
      {
        "image": "BarChart.png",
        "code": "%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        vals = [1, 3, 2, 5] #HEREFROM\n        labels = [\n            \"foo\",\n            \"bar\",\n            \"foo3\",\n            \"foo2\",\n        ]\n        colors = [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\"]\n        bar = BarChart(\n            vals,\n            max_value=max(vals),\n            bar_colors=colors,\n            bar_names=labels,\n            bar_label_scale_val=1,\n        ) #HERETO\n        self.add(bar) \n        self.camera.frame.scale(1/1.4)",
        "css": ""
      }
    ],
    [
      {
        "image": "Light_change_default.png",
        "code": "%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        self.camera.background_color = WHITE #HEREFROM\n        Text.set_default(color=BLACK)\n        Line.set_default(color=YELLOW)\n        Line.set_default(stroke_width=20)\n\n        mob = Text(\"Light Mode\") \n        l=Line(2*LEFT,2*RIGHT).next_to(mob,DOWN)\n        self.add(mob,l)\n\n        Line.set_default()\n        Text.set_default() #HERETO\n        self.camera.frame.scale(1/4)",
        "css": ""
      }
    ]
  ],
  "Text": [
    [
      {
        "image": "Text1.png",
        "code": "mob = Text(\"Hello\", color=WHITE) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Text2.png",
        "code": "mob = Text(\"World\", color=YELLOW,slant=ITALIC) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Underline.png",
        "code": "t = Tex(\"YES\") \nul = Underline(t, color=YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Bold.png",
        "code": "mob = Text(\"NO\", color=YELLOW,weight=BOLD)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "MathTex.png",
        "code": "mob = MathTex(r\"\\Psi(x)\", color=WHITE)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "MathTex_stix2.png",
        "code": "stix2 = TexTemplate()  \nstix2.add_to_preamble(r\"\\usepackage{stix2}\", prepend= True)  \nMathTex.set_default(tex_template=stix2)  \nmob = MathTex(r\"\\Psi(x)\", color=WHITE)  ",
        "css": ""
      }
    ],
    [
      {
        "image": "MathTex2.png",
        "code": "mob = MathTex(r\"e^x\",substrings_to_isolate=\"x\") \nmob.set_color_by_tex(\"x\", YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Check.png",
        "code": "check= Tex(r\"\\checkmark\", color= GREEN, stroke_width=8).scale(3) \ncheck.stretch(0.8, dim = 1) \ncheck.stretch(1.1, dim = 0) ",
        "css": ""
      }
    ]
  ],
  "Camera and Style": [
    [
      {
        "image": "Background.png",
        "code": "self.camera.background_color = YELLOW ",
        "css": ""
      }
    ],
    [
      {
        "image": "ZoomIN.png",
        "code": "#needs ZoomedScene \nself.camera.frame.scale(0.6) ",
        "css": ""
      }
    ],
    [
      {
        "image": "ZoomOUT.png",
        "code": "# needs ZoomedScene \nself.camera.frame.scale(1.2) ",
        "css": ""
      }
    ],
    [
      {
        "image": "CameraLEFT.png",
        "code": "# needs ZoomedScene \nself.camera.frame.shift(LEFT*0.5) ",
        "css": ""
      }
    ],
    [
      {
        "image": "CameraUP.png",
        "code": "# needs ZoomedScene \nself.camera.frame.shift(UP*0.4) ",
        "css": ""
      }
    ],
    [
      {
        "image": "MatchHEIGHT.png",
        "code": "# needs ZoomedScene \nself.camera.frame.height =  mob.height + 3*SMALL_BUFF ",
        "css": ""
      }
    ],
    [
      {
        "image": "MatchWIDTH.png",
        "code": "# needs ZoomedScene \nself.camera.frame.width =  mob.width + 3*SMALL_BUFF  ",
        "css": ""
      }
    ],
    [
      {
        "image": "FullScreenRectangle.png",
        "code": "mob = FullScreenRectangle(stroke_width=200, color= YELLOW) ",
        "css": ""
      }
    ],
    [
      {
        "image": "SurroundingRectangle.png",
        "code": "inner = Tex(r\"\\textbf{Hello}\", color=WHITE) \nmob = SurroundingRectangle(inner, corner_radius=0.1) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Dot_set_color_by_gradient.png",
        "code": "mob = Dot(radius=2.0)  \nmob.set_color_by_gradient([PINK, BLUE]) ",
        "css": ""
      }
    ],
    [
      {
        "image": "Polygon_set_color.png",
        "code": "mob = Polygon([-1, .5, 0], [-.5, 2, 0], [1, 2, 0], [1.5, .5, 0], [.25, -.5, 0], sheen_direction = UP) \nmob.set_fill(opacity=.5) \nmob.set_color([TEAL, RED, YELLOW]) \nmob.set_stroke(width=8) \nmob.move_to(ORIGIN) ",
        "css": ""
      }
    ]
  ],
  "Plots": [
    [
      {
        "image": "Axes_e_x.png",
        "code": "axes = Axes( \n    x_range=[-8, 9, 2], \n    y_range=[-6, 7, 2], \n    x_length=4, \n    y_length=4, \n    axis_config={\"include_numbers\": True, \"numbers_to_exclude\": [0]}, \n    x_axis_config={\"color\": ORANGE}, \n    y_axis_config={\"color\": ORANGE}, \n) \naxes_label = axes.get_axis_labels(x_label=\"x\", y_label=\"f(x)\") \ngraph = axes.plot(lambda x: 5*np.e ** (-x**2/2), x_range=[-5, 5], color=YELLOW) \ngraph_label = axes.get_graph_label(graph, label=\"e^{-x^2}\", color=YELLOW, x_val=1,dot=False) \nself.add(axes, graph, graph_label, axes_label) ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "Axes_zoom.png",
        "code": "%%manim $params\nclass Example(ZoomedScene):  \n    def __init__(self, **kwargs):   #HEREFROM\n        ZoomedScene.__init__( \n            self, \n            zoom_factor=0.1, \n            zoomed_display_height=6, \n            zoomed_display_width=3,  \n            image_frame_stroke_width=20,  \n            zoomed_camera_config={  \n                \"default_frame_stroke_width\": 3,  \n            },  \n            **kwargs  \n        )      \n      \n    def construct(self):  \n        self.activate_zooming(animate=False)  \n      \n        ax = Axes(  \n            x_range=[0, 10, 2],  \n            y_range=[0,10, 2],  \n            x_length=2,  \n            y_length=2,  \n            x_axis_config={\"color\": ORANGE},  \n            y_axis_config={\"color\": ORANGE},  \n        )  \n        ax.shift(DL)  \n        x_vals = [0, 1, 2, 3,4,5]  \n        y_vals = [2, -1, 4, 2, 4, 1]  \n        graph = ax.plot_line_graph(x_values=x_vals, y_values=y_vals)  \n        self.zoomed_camera.frame.move_to(graph.get_top()+0.1*DL)  \n        self.zoomed_display.shift(3*LEFT+0.4*UP)  \n        self.camera.frame.scale(1/2)  \n        self.camera.frame.shift(UR*1)  \n        self.add(ax, graph)  #HERETO",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "ComplexPlane.png",
        "code": "plane = ComplexPlane().add_coordinates() \nd1 = Dot(plane.n2p(2 + 1j), color=YELLOW) \nd2 = Dot(plane.n2p(-3 - 2j), color=YELLOW) \nlabel1 = MathTex(\"2+i\").next_to(d1, UR, 0.1) \nlabel2 = MathTex(\"-3-2i\").next_to(d2, UR, 0.1) \nself.add(plane, d1,label1,d2,label2) ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "PolarPlane.png",
        "code": "polarplane_pi = PolarPlane( \n    azimuth_units=\"PI radians\", \n    size=6, \n    azimuth_label_font_size=33.6, \n    radius_config={\"font_size\": 33.6}, \n).add_coordinates() ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "Graph_with_Number.png",
        "code": "vertices = [1, 2, 3, 4, 5, 6, 7, 8]  \nedges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),  \n         (2, 8), (3, 4), (6, 1), (6, 2),  \n         (6, 3), (7, 2), (7, 4)]  \ng = Graph(vertices, edges, layout=\"circular\", layout_scale=3,  \n          labels=True, vertex_config={7: {\"fill_color\": RED}},  \n          edge_config={(1, 7): {\"stroke_color\": RED},  \n                       (2, 7): {\"stroke_color\": RED},  \n                       (4, 7): {\"stroke_color\": RED}})  ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "StreamLines.png",
        "code": "func = lambda pos: ((pos[0]*UR+pos[1]*LEFT) - pos)  \nmob= StreamLines(func,x_range=[-5,5,1], y_range=[-5,5,1],stroke_width=3)  \nself.add(mob)  ",
        "css": "width: 170px; height: auto;"
      }
    ],
    [
      {
        "image": "ArrowVectorField.png",
        "code": "func = lambda pos: np.sin(pos[1])*RIGHT+np.cos(pos[0])*UP  \nmob = ArrowVectorField(func)  ",
        "css": "width: 170px; height: auto;"
      }
    ]
  ]
}