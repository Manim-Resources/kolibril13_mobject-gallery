{
  "Plots_000_Axes_e_x.png": "axes = Axes(\n    x_range=[-8, 9, 2],\n    y_range=[-6, 7, 2],\n    x_length=4,\n    y_length=4,\n    axis_config={\"include_numbers\": True, \"numbers_to_exclude\": [0]},\n    x_axis_config={\"color\": ORANGE},\n    y_axis_config={\"color\": ORANGE},\n)\naxes_label = axes.get_axis_labels(x_label=\"x\", y_label=\"f(x)\")\ngraph = axes.get_graph(lambda x: 5*np.e ** (-x**2/2), x_range=[-5, 5], color=YELLOW)\ngraph_label = axes.get_graph_label(graph, label=\"e^{-x^2}\", color=YELLOW, x_val=1,dot=False)",
  "Plots_001_Axes2.png": "axes = Axes(\n    x_range=[-8, 9, 2],\n    y_range=[-6, 7, 2],\n    x_length=4,\n    y_length=4,\n    axis_config={\"include_numbers\": True, \"numbers_to_exclude\": [0]},\n    x_axis_config={\"color\": PINK},\n    y_axis_config={\"color\": ORANGE},\n)\naxes_label = axes.get_axis_labels(x_label=\"x\", y_label=\"y\")\ngraph = axes.get_graph(lambda x: np.e ** x, x_range=[-8, 2], color=GREEN_E)\ngraph_label = axes.get_graph_label(graph, label=\"e^x\", color=YELLOW)",
  "Plots_002_ComplexPlane.png": "plane = ComplexPlane().add_coordinates()\nd1 = Dot(plane.n2p(2 + 1j), color=YELLOW)\nd2 = Dot(plane.n2p(-3 - 2j), color=YELLOW)\nlabel1 = MathTex(\"2+i\").next_to(d1, UR, 0.1)\nlabel2 = MathTex(\"-3-2i\").next_to(d2, UR, 0.1)",
  "Plots_003_PolarPlane.png": "polarplane_pi = PolarPlane(\n            azimuth_units=\"PI radians\",\n            size=6,\n            azimuth_label_font_size=33.6,\n            radius_config={\"font_size\": 33.6},\n        ).add_coordinates()",
  "Plots_004_Graph_with_Number.png": "vertices = [1, 2, 3, 4, 5, 6, 7, 8]\nedges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),\n         (2, 8), (3, 4), (6, 1), (6, 2),\n         (6, 3), (7, 2), (7, 4)]\ng = Graph(vertices, edges, layout=\"circular\", layout_scale=3,\n          labels=True, vertex_config={7: {\"fill_color\": RED}},\n          edge_config={(1, 7): {\"stroke_color\": RED},\n                       (2, 7): {\"stroke_color\": RED},\n                       (4, 7): {\"stroke_color\": RED}})",
  "Plots_005_StreamLines.png": "func = lambda pos: ((pos[0]*UR+pos[1]*LEFT) - pos)\nmob= StreamLines(func,delta_x=1, delta_y=1,stroke_width=3)\nself.add(mob)",
  "Plots_006_ArrowVectorField.png": "func = lambda pos: np.sin(pos[1])*RIGHT+np.cos(pos[0])*UP\nmob = ArrowVectorField(func)"
}